package edu.vt.EntityBeans;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serial;
import java.io.Serializable;
import java.sql.Date;
import java.time.LocalDateTime;

/*
The @Entity annotation designates this class as a Jakarta Persistence Entity POJO class
representing the Cat table in the CatsDB database.
 */
@Entity

// Name of the database table represented by this class
@Table(name = "PublicConcert")

@NamedQueries({
        // This named query is used in PublicConcertFacade
        @NamedQuery(name = "PublicConcert.findByPublicConcertName", query = "SELECT c FROM PublicConcert c WHERE c.event_name = :name"),
        @NamedQuery(name = "PublicConcert.findByPublicConcertArtistName", query = "SELECT c FROM PublicConcert c WHERE c.artist_name = :artist_name")

})

public class PublicConcert implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the PublicConcert table in the VideosDB database.

    This is a concert on the public list signed out users can see
    CREATE TABLE PublicConcert
    (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    event_id VARCHAR(30) NOT NULL, ID provided by ticketmaster used to get ticketing info
    event_name VARCHAR(128) NOT NULL,
    event_url VARCHAR(256) NOT NULL,
    artist_name VARCHAR(128) NOT NULL,
    artist_id VARCHAR(30) NOT NULL,  ID provided by ticketmaster used to get other events from same artist
    venue_name VARCHAR(128) NOT NULL,
    venue_id VARCHAR(30) NOT NULL, ID provided by ticketmaster used to get other events at same venue
    venue_state VARCHAR(2) NOT NULL,
    venue_city VARCHAR(64) NOT NULL,
    venue_latitude DECIMAL(8, 6) NOT NULL,      Ranges from  -90 S to  90 N
    venue_longitude DECIMAL(9, 6) NOT NULL,     Ranges from -180 W to 180 E
    description VARCHAR (1024) NOT NULL,
    start_date_time DATETIME NOT NULL,
    image_url VARCHAR(256) NOT NULL,
    PRIMARY KEY(id)
);
    ========================================================
     */
    @Serial
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED NOT NULL AUTO_INCREMENT
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;

    // Concert Ticketmaster event id
    //event_id VARCHAR(30) NOT NULL, /* ID provided by ticketmaster used to get ticketing info */
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "event_id")
    private String event_id;

    // Event name
    // event_name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "event_name")
    private String event_name;

    // Event URL
    // event_url VARCHAR(256) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "event_url")
    private String event_url;

    // artist name
    // artist_name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "artist_name")
    private String artist_name;

    // artist ticketmaster id
    //artist_id VARCHAR(30) NOT NULL, /* ID provided by ticketmaster used to get other events from same artist */
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "artist_id")
    private String artist_id;

    // venue name
    //venue_name VARCHAR(128) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "venue_name")
    private String venue_name;

    // venue ticketmaster id
    // venue_id VARCHAR(30) NOT NULL, /*ID provided by ticketmaster used to get other events at same venue */
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "venue_id")
    private String venue_id;

    //venue_state VARCHAR(2) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2)
    @Column(name = "venue_state")
    private String venue_state;

    //venue_city VARCHAR(64) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 64)
    @Column(name = "venue_city")
    private String venue_city;

    // venue latitude
    // venue_latitude DECIMAL(8, 6) NOT NULL,     /* Ranges from  -90 S to  90 N */
    @Basic(optional = false)
    @NotNull
    @Column(name = "venue_latitude")
    private Double venue_latitude;

    // venue_longitude
    // venue_longitude DECIMAL(9, 6) NOT NULL,    /* Ranges from -180 W to 180 E */
    @Basic(optional = false)
    @NotNull
    @Column(name = "venue_longitude")
    private Double venue_longitude;

    // venue description
    // description VARCHAR (1024) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 1024)
    @Column(name = "description")
    private String description;

    // start_date_time DATETIME NOT NULL
    @Basic(optional = false)
    @NotNull
    @Column(name = "start_date_time")
    private LocalDateTime startDateTime;

    // Event image url
    //image_url VARCHAR(256) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "image_url")
    private String image_url;


    //===================
    // Constructor Method
    //===================

    // Used in PrepareCreate method in CatController
    public PublicConcert() {
    }

    /*
     *********************************
     *   Getter and Setter Methods   *
     *********************************
     */

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getEvent_id() {
        return event_id;
    }

    public void setEvent_id(String event_id) {
        this.event_id = event_id;
    }

    public String getEvent_name() {
        return event_name;
    }

    public void setEvent_name(String event_name) {
        this.event_name = event_name;
    }

    public String getEvent_url() {
        return event_url;
    }

    public void setEvent_url(String event_url) {
        this.event_url = event_url;
    }

    public String getArtist_name() {
        return artist_name;
    }

    public void setArtist_name(String artist_name) {
        this.artist_name = artist_name;
    }

    public String getArtist_id() {
        return artist_id;
    }

    public void setArtist_id(String artist_id) {
        this.artist_id = artist_id;
    }

    public String getVenue_name() {
        return venue_name;
    }

    public void setVenue_name(String venue_name) {
        this.venue_name = venue_name;
    }

    public String getVenue_id() {
        return venue_id;
    }

    public void setVenue_id(String venue_id) {
        this.venue_id = venue_id;
    }

    public Double getVenue_latitude() {
        return venue_latitude;
    }

    public void setVenue_latitude(Double venue_latitude) {
        this.venue_latitude = venue_latitude;
    }

    public Double getVenue_longitude() {
        return venue_longitude;
    }

    public void setVenue_longitude(Double venue_longitude) {
        this.venue_longitude = venue_longitude;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public LocalDateTime getStartDateTime() {
        return startDateTime;
    }

    public void setStartDateTime(LocalDateTime startDateTime) {
        this.startDateTime = startDateTime;
    }

    public String getVenue_state() {
        return venue_state;
    }

    public void setVenue_state(String venue_state) {
        this.venue_state = venue_state;
    }

    public String getVenue_city() {
        return venue_city;
    }

    public void setVenue_city(String venue_city) {
        this.venue_city = venue_city;
    }

    public String getImage_url() {
        return image_url;
    }

    public void setImage_url(String image_url) {
        this.image_url = image_url;
    }

    /*
     ***************************************
     *   Instance Methods Used Internally  *
     ***************************************
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the PublicConcert object identified by 'object' is the same as the PublicConcert
     object identified by 'id' Parameter object = PublicConcert object identified by 'object'.
     Returns True if the PublicConcert 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof PublicConcert)) {
            return false;
        }
        PublicConcert other = (PublicConcert) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }
}
