package edu.vt.EntityBeans;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Date;

/*
The @Entity annotation designates this class as a Jakarta Persistence Entity POJO class
representing the UserSong table in the MusicDB database.
 */
@Entity

// Name of the database table represented by this class
@Table(name = "UserSong")

@NamedQueries({
        // This named query is used in UserSongFacade
        @NamedQuery(name = "UserSong.findByUserSongName", query = "SELECT c FROM UserSong c WHERE c.name = :name"),
        @NamedQuery(name = "UserSong.findSongsByUserDatabasePrimaryKey", query = "SELECT p FROM UserSong p WHERE p.userId.id = :primaryKey"),
        @NamedQuery(name = "UserSong.findByUserSongArtistSpotifyId", query = "SELECT c FROM UserSong c WHERE c.artist_spotify_id = :artist_spotify_id"),
        @NamedQuery(name = "UserSong.findQuestionnairesByUserPrimaryKey", query = "SELECT u FROM UserSong u WHERE u.userId.id = :primaryKey")
})

public class UserSong implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the UserSong table in the MusicDB database.

    This is a concert added to users personal list
    Because there can be a limitless number of artists featured in the concert we just store the primary artist info and then list the other artists in the description
    Ticketmaster ids vary in length
    CREATE TABLE UserSong
    (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    spotify_id VARCHAR(22) NOT NULL, Spotify ids are always 22 characters
    name VARCHAR(128) NOT NULL,
    duration VARCHAR(16) NOT NULL,
    release_date DATE NOT NULL,
    artist_name VARCHAR(128) NOT NULL,
    artist_spotify_id VARCHAR(22) NOT NULL,
    album_name VARCHAR(128) NOT NULL,
    album_artwork_url VARCHAR(256) NOT NULL,
    is_explicit BOOLEAN NOT NULL DEFAULT FALSE,
    youtube_video_id VARCHAR (32) NOT NULL,
    lyrics_snippet TEXT NOT NULL,
    user_id INT UNSIGNED,
    FOREIGN KEY(user_id) REFERENCES User(id) ON DELETE CASCADE
    );
    ========================================================
     */
    @Serial
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;

    // spotify_id VARCHAR(22) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 22)
    @Column(name = "spotify_id")
    private String spotify_id;

    // name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "name")
    private String name;

    // duration VARCHAR(16) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 16)
    @Column(name = "duration")
    private String duration;

    // release_date DATE NOT NULL
    @Basic(optional = false)
    @NotNull
    @Column(name = "release_date")
    private LocalDate release_date;

    // artist_name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "artist_name")
    private String artist_name;

    // artist_spotify_id VARCHAR(22) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 22)
    @Column(name = "artist_spotify_id")
    private String artist_spotify_id;

    // album_name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "album_name")
    private String album_name;

    // album_artwork_url VARCHAR(256) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "album_artwork_url")
    private String album_artwork_url;

    // is_explicit BOOLEAN NOT NULL DEFAULT FALSE
    @Basic(optional = false)
    @NotNull
    @Column(name = "is_explicit")
    private boolean is_explicit;

    // youtube_video_id VARCHAR (32) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "youtube_video_id")
    private String youtube_video_id;

    // lyrics_snippet TEXT NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 65535)
    @Lob
    @Column(name = "lyrics_snippet")
    private String lyrics_snippet;

    // user_id INT UNSIGNED NOT NULL,
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    @ManyToOne
    private User userId;


    //===================
    // Constructor Method
    //===================

    // Used in PrepareCreate method
    public UserSong() {
    }

    /*
     *********************************
     *   Getter and Setter Methods   *
     *********************************
     */

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }


    public User getUserId() {
        return userId;
    }

    public void setUserId(User userId) {
        this.userId = userId;
    }

    public String getSpotify_id() {
        return spotify_id;
    }

    public void setSpotify_id(String spotify_id) {
        this.spotify_id = spotify_id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNameExplicit(){
        if(this.is_explicit){
            return this.name + "\uD83C\uDD74";
        } else{
            return this.name;
        }
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public LocalDate getRelease_date() {
        return release_date;
    }

    public String getFormattedReleaseDate() {
        return release_date != null
                ? release_date.format(java.time.format.DateTimeFormatter.ofPattern("MM/dd/yyyy"))
                : "";
    }

    public void setRelease_date(LocalDate release_date) {
        this.release_date = release_date;
    }

    public String getArtist_name() {
        return artist_name;
    }

    public void setArtist_name(String artist_name) {
        this.artist_name = artist_name;
    }

    public String getArtist_spotify_id() {
        return artist_spotify_id;
    }

    public void setArtist_spotify_id(String artist_spotify_id) {
        this.artist_spotify_id = artist_spotify_id;
    }

    public String getAlbum_name() {
        return album_name;
    }

    public void setAlbum_name(String album_name) {
        this.album_name = album_name;
    }

    public String getAlbum_artwork_url() {
        return album_artwork_url;
    }

    public void setAlbum_artwork_url(String album_artwork_url) {
        this.album_artwork_url = album_artwork_url;
    }

    public boolean isIs_explicit() {
        return is_explicit;
    }

    public void setIs_explicit(boolean is_explicit) {
        this.is_explicit = is_explicit;
    }

    public String getYoutube_video_id() {
        return youtube_video_id;
    }

    public void setYoutube_video_id(String youtube_video_id) {
        this.youtube_video_id = youtube_video_id;
    }

    public String getLyrics_snippet() {
        return lyrics_snippet;
    }

    public void setLyrics_snippet(String lyrics_snippet) {
        this.lyrics_snippet = lyrics_snippet;
    }

    /*
     ***************************************
     *   Instance Methods Used Internally  *
     ***************************************
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the UserSong object identified by 'object' is the same as the UserSong
     object identified by 'id' Parameter object = UserSong object identified by 'object'.
     Returns True if the UserSong 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof UserSong)) {
            return false;
        }
        UserSong other = (UserSong) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }
}
