package edu.vt.EntityBeans;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Date;

/*
The @Entity annotation designates this class as a Jakarta Persistence Entity POJO class
representing the PlaylistSong table in the MusicDB database.
 */
@Entity
@Table(
        // Name of the database table represented by this class
        name = "PlaylistSong",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = {"playlist_id", "song_id"})
        }
)

@NamedQueries({
        // This named query is used in PlaylistSongFacade
        @NamedQuery(name = "PlaylistSong.findPlaylistSongByPlaylistDatabasePrimaryKey", query = "SELECT p FROM PlaylistSong p WHERE p.playlist_id.id = :primaryKey")
})

public class PlaylistSong implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the PlaylistSong table in the MusicDB database.

    CREATE TABLE PlaylistSong
    (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    playlist_id INT UNSIGNED NOT NULL,
    song_id INT UNSIGNED NOT NULL,
    FOREIGN KEY (playlist_id) REFERENCES Playlist(id) ON DELETE CASCADE,
    FOREIGN KEY (song_id) REFERENCES UserSong(id) ON DELETE CASCADE,
    UNIQUE (playlist_id, song_id)
    );
    ========================================================
     */
    @Serial
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;

    // playlist_id INT UNSIGNED NOT NULL,
    @JoinColumn(name = "playlist_id", referencedColumnName = "id")
    @ManyToOne(optional = false)
    private Playlist playlist_id;

    // song_id INT UNSIGNED NOT NULL,
    @JoinColumn(name = "song_id", referencedColumnName = "id")
    @ManyToOne(optional = false)
    private UserSong song_id;


    //===================
    // Constructor Method
    //===================

    // Used in PrepareCreate method
    public PlaylistSong() {
    }

    /*
     *********************************
     *   Getter and Setter Methods   *
     *********************************
     */

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Playlist getPlaylist_id() {
        return playlist_id;
    }

    public void setPlaylist_id(Playlist playlist_id) {
        this.playlist_id = playlist_id;
    }

    public UserSong getSong_id() {
        return song_id;
    }

    public void setSong_id(UserSong song_id) {
        this.song_id = song_id;
    }

    /*
     ***************************************
     *   Instance Methods Used Internally  *
     ***************************************
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the UserSong object identified by 'object' is the same as the UserSong
     object identified by 'id' Parameter object = UserSong object identified by 'object'.
     Returns True if the UserSong 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof PlaylistSong)) {
            return false;
        }
        PlaylistSong other = (PlaylistSong) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }
}
