package edu.vt.EntityBeans;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serial;
import java.io.Serializable;
import java.sql.Date;

/*
The @Entity annotation designates this class as a Jakarta Persistence Entity POJO class
representing the UserArtist table in the MusicDB database.
 */
@Entity

// Name of the database table represented by this class
@Table(name = "UserArtistAlbum")

@NamedQueries({
        // This named query is used in UserArtistFacade
        @NamedQuery(name = "UserArtistAlbum.findByUserArtistId", query = "SELECT c FROM UserArtistAlbum c WHERE c.userArtistId.id = :userArtistId"),
        @NamedQuery(name = "UserArtistAlbum.findByUserArtistAlbumSpotifyId", query = "SELECT c FROM UserArtistAlbum c WHERE c.spotify_id = :spotify_id")
})

public class UserArtistAlbum implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the UserArtist table in the MusicDB database.

    CREATE TABLE UserArtist
    (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    spotify_id VARCHAR(22) NOT NULL,
    name VARCHAR(128) NOT NULL,
    image_url VARCHAR(256) NOT NULL,
    user_id INT UNSIGNED,
    FOREIGN KEY(user_id) REFERENCES User(id) ON DELETE CASCADE
    );
    ========================================================
     */
    @Serial
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;

    // Spotify album id
    //spotify_id VARCHAR(22) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 22)
    @Column(name = "spotify_id")
    private String spotify_id;

    // Album name
    // name VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "name")
    private String name;

    // Album artists
    // artists VARCHAR(256) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name="artists")
    private String artists;

    // Album release date
    // release_date VARCHAR(12) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min=1, max=12)
    @Column(name = "release_date")
    private String release_date;

    // Album Image URL
    // image_url VARCHAR(256) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "image_url")
    private String image_url;

    // user_id INT UNSIGNED NOT NULL,
    @JoinColumn(name = "artist_id", referencedColumnName = "id")
    @ManyToOne
    private UserArtist userArtistId;


    //===================
    // Constructor Method
    //===================

    // Used in PrepareCreate method
    public UserArtistAlbum() {
    }

    /*
     *********************************
     *   Getter and Setter Methods   *
     *********************************
     */

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getSpotify_id() {
        return spotify_id;
    }

    public void setSpotify_id(String spotify_id) {
        this.spotify_id = spotify_id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImage_url() {
        return image_url;
    }

    public void setImage_url(String image_url) {
        this.image_url = image_url;
    }

    public String getArtists() {
        return artists;
    }

    public void setArtists(String artists) {
        this.artists = artists;
    }

    public String getRelease_date() {
        return release_date;
    }

    public void setRelease_date(String release_date) {
        this.release_date = release_date;
    }

    public UserArtist getUserArtistId() {
        return userArtistId;
    }

    public void setUserArtistId(UserArtist userArtistId) {
        this.userArtistId = userArtistId;
    }

    /*
     ***************************************
     *   Instance Methods Used Internally  *
     ***************************************
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the UserArtist object identified by 'object' is the same as the UserArtist
     object identified by 'id' Parameter object = UserArtist object identified by 'object'.
     Returns True if the UserArtist 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof UserArtistAlbum)) {
            return false;
        }
        UserArtistAlbum other = (UserArtistAlbum) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }
}
